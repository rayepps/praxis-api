
name: 'Auto: Deploy Engineer Env'
on:
  push:
    branches:
      - 'eng/*'
env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
jobs:
  data:
    name: Determine Engineer Name From Branch
    runs-on: ubuntu-latest
    outputs: 
      engineer: ${{ steps.script.outputs.engineer }}
    steps:
      - id: script
        uses: actions/github-script@v4
        env:
          GITHUB_REF: ${{ github.ref }}
        with:
          script: |
            const engineer = process.env.GITHUB_REF.replace('refs/heads/eng/', '');
            console.log('engineer: ' + engineer);
            console.log('::set-output name=engineer::' + engineer);
  build_and_deploy_infrastructure:
    name: Deploy Engineer Env Infrastructure
    runs-on: ubuntu-latest
    needs: data
    steps:
      - uses: actions/checkout@v2
      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.3
      - run: terraform init
        working-directory: ./env-infrastructure
      - run: terraform workspace new eng-${{ needs.data.outputs.engineer }}
        continue-on-error: true # In case eng workspace already exists (this is anytime after first deploy)
        working-directory: ./env-infrastructure
      - run: terraform workspace select eng-${{ needs.data.outputs.engineer }}
        working-directory: ./env-infrastructure
      - run: terraform apply -auto-approve -var-file eng.tfvars -var engineer="${{ needs.data.outputs.engineer }}"
        working-directory: ./env-infrastructure
  build_and_deploy_api:
    name: Build and Deploy Engineer API
    runs-on: ubuntu-latest
    needs: [build_and_deploy_infrastructure, data]
    steps:
      - uses: actions/checkout@v2
      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.3
      - uses: actions/setup-node@v2
        with:
          node-version: 14.x
          cache: 'yarn'
          cache-dependency-path: api/yarn.lock
      - run: yarn
        working-directory: ./api
      - run: yarn build
        working-directory: ./api
      - run: yarn make-manifest
        working-directory: ./api
      - run: terraform init
        working-directory: ./api/tf
      - run: terraform workspace new eng-${{ needs.data.outputs.engineer }}
        continue-on-error: true # In case eng workspace already exists (this is anytime after first deploy)
        working-directory: ./api/tf
      - run: terraform workspace select eng-${{ needs.data.outputs.engineer }}
        working-directory: ./api/tf
      - run: terraform apply -auto-approve -var-file eng.tfvars -var engineer="${{ needs.data.outputs.engineer }}"
        working-directory: ./api/tf